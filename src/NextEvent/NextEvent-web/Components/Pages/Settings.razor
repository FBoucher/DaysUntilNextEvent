@page "/settings"
@using Azure.Storage.Blobs
@using NextEvent_web.Domain
@using System.Text.Json
@using System.Text
@using Microsoft.FluentUI.AspNetCore.Components.Extensions
@inject BlobServiceClient BlobClient
@inject IJSRuntime jsRuntime
@inject IToastService toastService
@inject ILogger<Settings> Logger

@rendermode InteractiveServer

<FluentDesignTheme @bind-Mode="@Mode"
				   @bind-OfficeColor="@OfficeColor"
				   StorageName="theme" />

<h2>My Settings</h2>

<h3>Site</h3>

<div style="padding: 50px;">
	<FluentStack Orientation="Orientation.Vertical">
		<FluentSelect   Label="Theme" Width="150px"
						Items="@(Enum.GetValues<DesignThemeModes>())"
						@bind-SelectedOption="@Mode" />
		<FluentSelect   Label="Color"
						Items="@(Enum.GetValues<OfficeColor>().Select(i => (OfficeColor?)i))"
			Height="200px" Width="250px" @bind-SelectedOption="@OfficeColor">
			<OptionTemplate>
				<FluentStack>
					<FluentIcon Value="@(new Icons.Filled.Size20.RectangleLandscape())" Color="Color.Custom"
						CustomColor="@(@context.ToAttributeValue() != "default" ? context.ToAttributeValue() : "#036ac4" )" />
					<FluentLabel>@context</FluentLabel>
				</FluentStack>
			</OptionTemplate>
		</FluentSelect>
	</FluentStack>
</div>

<h3>Light Settings</h3>

<div style="padding: 20px;">
    <EditForm Model="@mySettings" OnValidSubmit="@HandleValidSubmit" FormName="nextEventSetting">
        <DataAnnotationsValidator />
        <FluentValidationSummary />
        
        <FluentStack Orientation="Orientation.Vertical" VerticalGap="20">
            
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentDatePicker Label="Important Date" @bind-Value="myDate"  />
            </FluentStack>

            <FluentStack Orientation="Orientation.Horizontal">
                <FluentTextField @bind-Value="mySettings.PrimaryRGBColor" Label="Primary RGB Color" Placeholder="(100,0,0)" @oninput="e => OnPasteRGB(e, nameof(mySettings.PrimaryRGBColor))" />
                <FluentButton OnClick="@(async () => await OpenColorPickerNewWindow())" IconEnd="@(new Icons.Filled.Size24.Color())" />
            </FluentStack>

            <FluentStack Orientation="Orientation.Horizontal">
                <FluentTextField @bind-Value="mySettings.SecondaryRGBColor" Label="Secondary RGB Color" Placeholder="(0,0,100)"  @oninput="e => OnPasteRGB(e, nameof(mySettings.SecondaryRGBColor))"  />
                <FluentButton OnClick="@(async () => await OpenColorPickerNewWindow())" IconEnd="@(new Icons.Filled.Size24.Color())" />
            </FluentStack>
        
            <FluentStack Orientation="Orientation.Horizontal">
                <FluentTextField @bind-Value="settingsURL" Label="Settings URL" ReadOnly=true />
                <FluentButton OnClick="@(async () => await jsRuntime.InvokeVoidAsync("navigator.clipboard.writeText", settingsURL))" IconEnd="@(new Icons.Regular.Size24.ClipboardLink())" />
            </FluentStack>
            
            <FluentButton Type="ButtonType.Submit" Appearance="Appearance.Accent">Submit</FluentButton>
        </FluentStack>

    </EditForm>
</div>

@code {
    public DesignThemeModes Mode { get; set; }
    public OfficeColor? OfficeColor { get; set; }

    private Domain.MySettings mySettings = new();
    private DateTime? myDate = DateTime.Now; 

    private string settingsURL = string.Empty;

    void OnLoaded(LoadedEventArgs e)
    {
        Logger.LogInformation($"Loaded: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void OnLuminanceChanged(LuminanceChangedEventArgs e)
    {
        Logger.LogInformation($"Changed: {(e.Mode == DesignThemeModes.System ? "System" : "")} {(e.IsDark ? "Dark" : "Light")}");
    }

    void OnPasteRGB(ChangeEventArgs e, string propertyName)
    {
        var value = e.Value?.ToString();

        if (!string.IsNullOrEmpty(value) && value.StartsWith("rgb"))
        {
            value = value.Replace("rgb", "");

            if (propertyName == nameof(mySettings.PrimaryRGBColor))
            {
                mySettings.PrimaryRGBColor = value;
            }
            else if (propertyName == nameof(mySettings.SecondaryRGBColor))
            {
                mySettings.SecondaryRGBColor = value;
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var docsContainer = BlobClient.GetBlobContainerClient("fileuploads");

            var blobClient = docsContainer.GetBlobClient("mysettings.json");

            settingsURL = blobClient.Uri.AbsoluteUri;
            var downloadInfo = await blobClient.DownloadAsync();
            using (var streamReader = new StreamReader(downloadInfo.Value.Content))
            {
                var content = await streamReader.ReadToEndAsync();
                mySettings = JsonSerializer.Deserialize<Domain.MySettings>(content) ?? new Domain.MySettings();
            }
            myDate = DateTime.Parse(mySettings.ImportantDate);
        }
        catch (Exception ex)
        {
            Console.WriteLine("Oops! --> " + ex.Message);
        }
    }

    private async Task HandleValidSubmit()
    {
        var docsContainer = BlobClient.GetBlobContainerClient("fileuploads");

        mySettings.ImportantDate = myDate?.ToString("yyyy-MM-dd") ?? string.Empty;

        var blobClient = docsContainer.GetBlobClient("mysettings.json");
        var jsonContent = JsonSerializer.Serialize(mySettings);
        using (var stream = new MemoryStream(Encoding.UTF8.GetBytes(jsonContent)))
        {
            await blobClient.UploadAsync(stream, overwrite: true);
            ShowConfirmationMessage();
        }
    }

    private void ShowConfirmationMessage()
    {
        toastService.ShowSuccess("Settings saved successfully!");
    }

    private async Task OpenColorPickerNewWindow()
    {
        await jsRuntime.InvokeVoidAsync("open", "https://rgbcolorpicker.com/", "_blank");
    }
}
